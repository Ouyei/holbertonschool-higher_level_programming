===============================
0. Integer addition module
===============================

Import module:
==============
    >>> add_integer = __import__('0-add_integer').add_integer


Function:
=========
Write a function that adds 2 integers.


Operations:
===========
‘a’ and ‘b’ must be integers or floats, otherwise raise a TypeError exception
with the message 'a must be an integer' or 'b must be an integer'.

Section // Numbers
==================

Test case #1: A test case between two integers

    >>> add_integer(1, 2)
    3

Test case #2: A test case between two floats

    >>> add_integer(10.0, 15.0)
    25

Test case #3: A test case between integer and float

    >>> add_integer(6, 20.0)
    26

Test case #4: A test case between float and integer

    >>> add_integer(10.0, 8)
    18

Test case #5: A test case between two negatives floats

    >>> add_integer(-6.5, -5)
    -11

Test case #6: A test case between float and negative integer

    >>> add_integer(100.5, -10)
    90

Section // Non-Numbers
======================

Test case #7: A test case with the first parameter of type 'None'

    >>> add_integer(None, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test case #8: A test case with the second parameter of type 'None'

    >>> add_integer(5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Test case #9: A test case with the first parameter of type 'list'

    >>> add_integer([1, 2], 15)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test case #10: A test case with the second parameter of type 'str'

    >>> add_integer(1, "Monty Python")
    Traceback (most recent call last):
    TypeError: b must be an integer

Section // Non-Parameters
=========================

Test case #11: A test case without parameters

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Test case #12: A test case for an argument with no assigned value

    >>> add_integer(a, 123)
    Traceback (most recent call last):
    NameError: name 'a' is not defined

Test case #13: A test case for using the default value of parameter 'b'

    >>> add_integer(5)
    103

Test case #14: A test case for using the default value of parameter 'b'
with the float parameter 'a'

    >>> add_integer(1.0, )
    99

NEW CASES
==========

Checking for module docstring:
	 >>> m = __import__("0-add_integer").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("0-add_integer").add_integer.__doc__
         >>> len(f) > 1
         True

Checking regular addition:
	 >>> add_integer(2, 3)
	 5

Checking positive with negative:
	 >>> add_integer(2, -4)
	 -2

Checking negative with positive:
	 >>> add_integer(-6, 8)
	 2

Checking addition over multiple values:
	 >>> [add_integer(i, i ** 2) for i in range(6)]
	 [0, 2, 6, 12, 20, 30]

Checking float with int:
	 >>> add_integer(2.1, 4)
	 6

Checking int with float:
	 >>> add_integer(5, 7.8)
	 12

Checking both float:
	 >>> add_integer(2.45, 3.1)
	 5

Checking for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Checking for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer

Checking super long int:
	 >>> add_integer(999999999999999999999999999999, 1)
	 1000000000000000000000000000000

Checking non-number with number:
	 >>> add_integer([1], 2)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Checking number with non-number:
	 >>> add_integer(3, "2")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Checking non-number with non-number:
	 >>> add_integer((2,), {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Checking bool with number:
	 >>> add_integer(True, 1)
	 Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Checking number with bool:
	 >>> add_integer(0, False)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer
