# 7-base_geometry.txt
# Oscar Bedat <3961@holbertonschool.com>

This module defines an function divides all elements of a matrix ``def integer_validator(self, name, value)``.

Using ``base_geometry``
------------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

Usage:

name should be a string and value ALWAYS a positive integer and different than 0
>>> bg.integer_validator("an_int", 18)
>>> bg.integer_validator("width", 89)

=== Test area function, not implemented ===
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

=== Test with 0 ===
>>> bg.integer_validator("width", 0)
Traceback (most recent call last):
ValueError: width must be greater than 0

=== Test with a negative number ===
>>> bg.integer_validator("width", -1)
Traceback (most recent call last):
ValueError: width must be greater than 0

=== Test with something different than an integer ===

>>> bg.integer_validator("width", (4,))
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("name", "Dani")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

=== Tests with no arguments ===

>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Section // No exceptions
=========================

Test case #0: A test case with good parameters
    
    >>> bg.integer_validator("my_int", 12)


Test case #1: A test case with good parameters

    >>> bg.integer_validator("width", 89)


Section // Type Errors
=========================

Test case #2: A test case with a not integer value

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #3: A test case with a infinite float value

    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf_float must be an integer

Test case #4: A test case with a NaN value

    >>> try:
    ...     bg.integer_validator("nan", float('nan'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] nan must be an integer

Test case #5: A test case with a boolean value

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #6: A test case with a tuple value

    >>> try:
    ...     bg.integer_validator("name", (4, ))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #7: A test case with a string value

    >>> try:
    ...     bg.integer_validator("name", 'Monty Python')
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #8: A test case with a none value

    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #9: A test case with a list value

    >>> try:
    ...     bg.integer_validator("name", [])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #10: A test case with a dictionary value

    >>> try:
    ...     bg.integer_validator("name", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #11: A test case with a class value

    >>> try:
    ...     bg.integer_validator("name", object)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test case #12: A test case without value

    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test case #13: A test case without value

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'


Section // Value Errors
=========================

Test case #14: A test case with zero as value

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Test case #15: A test case with a value less than zero

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0


Section // General Errors
=========================

Test case #16: A test case with a not available method

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented
